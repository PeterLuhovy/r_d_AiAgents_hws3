import aiohttp
import json
import mcp.types as types
from typing import List

# URL file servisu v Docker sieti
FILE_SERVICE_URL = "http://file_service:9001"

def process_pdf_file_tool() -> types.Tool:
    """
    Defin√≠cia n√°stroja pre spracovanie PDF s√∫boru.
    """
    return types.Tool(
        name="process_pdf_file",
        description="Spracuje prv√Ω dostupn√Ω PDF s√∫bor - skonvertuje ho na JPG obr√°zok a premenuje p√¥vodn√Ω s√∫bor s prefixom 'raw_'",
        inputSchema={
            "type": "object",
            "properties": {},
            "required": []
        }
    )

async def execute_process_pdf_file(**arguments) -> List[types.TextContent]:
    """
    Vykon√° spracovanie PDF s√∫boru cez file servis.
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{FILE_SERVICE_URL}/process-file") as response:
                if response.status == 200:
                    result_data = await response.json()
                    
                    # Kontrola, ƒçi boli nejak√© s√∫bory na spracovanie
                    if result_data.get("message") == "no files to process":
                        return [types.TextContent(
                            type="text",
                            text="üìÑ ≈Ωiadne PDF s√∫bory na spracovanie.\n\nV≈°etky s√∫bory u≈æ boli spracovan√© alebo v zlo≈æke nie s√∫ ≈æiadne PDF s√∫bory bez 'raw_' prefixu."
                        )]
                    
                    # √öspe≈°n√© spracovanie
                    original_filename = result_data.get("original_filename", "N/A")
                    raw_filename = result_data.get("raw_filename", "N/A")
                    base64_data = result_data.get("base64", "")
                    format_type = result_data.get("format", "jpeg")
                    
                    success_text = f"‚úÖ PDF s√∫bor √∫spe≈°ne spracovan√Ω!\n\n"
                    success_text += f"üìÅ P√¥vodn√Ω s√∫bor: {original_filename}\n"
                    success_text += f"üìÅ Premenovan√Ω na: {raw_filename}\n"
                    success_text += f"üñºÔ∏è Form√°t obr√°zka: {format_type.upper()}\n"
                    success_text += f"üìä Veƒækos≈• base64 d√°t: {len(base64_data):,} znakov\n\n"
                    success_text += f"üñºÔ∏è Obr√°zok je pripraven√Ω na zobrazenie alebo anal√Ωzu.\n"
                    success_text += f"üí° M√¥≈æete sa op√Ωta≈•: 'ƒåo je na obr√°zku?' alebo 'Analyzuj obsah fakt√∫ry'"
                    
                    # ≈†PECI√ÅLNY FORM√ÅT pre base64 obr√°zok - chatbot toto rozpozn√°
                    image_content = f"IMAGE_BASE64:{format_type}:{base64_data}"
                    
                    return [
                        types.TextContent(type="text", text=success_text),
                        types.TextContent(type="text", text=image_content)
                    ]
                    
                else:
                    error_text = await response.text()
                    return [types.TextContent(
                        type="text",
                        text=f"‚ùå Chyba pri spracovan√≠ PDF s√∫boru: HTTP {response.status}\n{error_text}"
                    )]
                    
    except aiohttp.ClientError as e:
        return [types.TextContent(
            type="text",
            text=f"‚ùå Chyba pri pripojen√≠ k file servisu: {str(e)}"
        )]
    except Exception as e:
        return [types.TextContent(
            type="text",
            text=f"‚ùå Neoƒçak√°van√° chyba: {str(e)}"
        )]